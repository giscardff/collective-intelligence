/*
 * DecisionTreeDisplay.java
 *
 * Created on 8 de Outubro de 2008, 20:41
 */

import java.awt.*;
import java.awt.geom.Line2D;
import javax.swing.*;

/**
 *
 * @author  giscardf
 */
public class DecisionTreeDisplay extends javax.swing.JFrame {

    private DrawPanel panel = null;                                     //draw panel to print the decision tree
    private JScrollPane scroll = null;                                  //scroll pane to fit the decision tree
    
    /**
     * Creates new form DecisionTreeDisplay
     * @param A <code>DecisionNode</code> representing the root node
     */
    public DecisionTreeDisplay(DecisionNode node) {
        super("DecisionTree");                                                  //set the window title
        panel = new DrawPanel(node);                                            //create the draw panel
        scroll = new JScrollPane(panel);                                        //create the scroll panel
        this.getContentPane().add(scroll, BorderLayout.CENTER);                 //add the scroll to the main frame
        this.setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(new Dimension(800, 600));
        initComponents();                                                       //initialize components
    }//End DecisionTreeDisplay() constructor

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}//End DecisionTreeDisplay class

/**
 * This class defines a panel whom default paint method render the dendogram
 * @author giscardf
 * @version 1.0
 */
class DrawPanel extends JPanel {

    private DecisionNode node;                                                  //point to the root node
    
    /**
     * Creates a new DrawPanel object
     * @param node A <code>DecisionNode</code> representing the root cluster
     */
    public DrawPanel(DecisionNode node){
        super(null);                                                            //set the default layout to null
        this.node = node;                                                       //point to root node
        this.setPreferredSize(new Dimension(100, 100));                         //set a default preferred size
    }//End DrawPanel() constructor
    
    /**
     * This method override the default paint method in order to draw the dendogram
     * @param g A <code>Graphics</code> representing the panel renderer
     */
    @Override    
    public void paint(Graphics g) {
        super.paint(g);        
        this.printTreeDecision(node, g);
    }//End paint() method
    
    /**
     * This method print the hierarchical cluster as a dendrogram     * 
     * @param node A <code>DecisionNode</code> representing the root cluster
     */
    public void printTreeDecision(DecisionNode node, Graphics g){        
        double width = getwidth(node) * 100;
        double height = getdepth(node) * 100 + 120;        
        this.drawnode(g, node, width / 2.0, 20);        
    }//End printTreeDecision() method
    
    /**
     * This method draw a simple node
     * @param g A <code>Graphics</code> representing the frame to paint
     * @param node A <code>DecisionNode</code> representing the node to paint
     */
    public void drawnode(Graphics g, DecisionNode node, double x, double y){
        if(node.results == null){
            /* get width of each brach */
            double w1 = getwidth(node.fb) * 100;
            double w2 = getwidth(node.tb) * 100;
            /* total space required by the node */
            double left = x - (w1 + w2) / 2.0;
            double right = x + (w1 + w2) / 2.0;            
            /* draw the condition string */
            g.drawString(node.col + ": " + node.value, (int)x - 20, (int)y - 10);
            /* draw lines to the braches */
            g.drawLine((int)x, (int)y, (int)(left + w1 / 2), (int)(y + 100));
            g.drawLine((int)x, (int)y, (int)(right - w2 / 2), (int)(y + 100));
            /* draw the brach nodes */
            this.drawnode(g, node.fb, left + w1 / 2, y + 100);
            this.drawnode(g, node.tb, right - w2 / 2, y + 100);
            
            /* update preferred size */
            if(this.getPreferredSize().getWidth() < (right - w2 / 2))
                this.setPreferredSize(new Dimension((int)(right - w2 / 2) + 20, (int)this.getSize().getHeight()));
            if(this.getPreferredSize().getHeight() < (y + 100))
                this.setPreferredSize(new Dimension((int)this.getSize().getWidth(), (int)y + 100 + 10));
        }//end if
        else{
            String txt = node.results.toString();            
            g.drawString(txt, (int)(x - 20), (int)y);            
        }//end else
            
    }//end drawnode() method
    
    /**
     * This method get the width of the tree
     * @param node A <code>DecisionNode</code> representing the node
     * @return A <code>double</code> representing the tree width
     */
    public double getwidth(DecisionNode node){
        if(node.tb == null && node.fb == null) return 1;
        return getwidth(node.tb) + getwidth(node.fb);
    }//end getwidth() method
    
    /**
     * This method get the depth of the tree
     * @param node A <code>DecisionNode</code> representing the node
     * @return A <code>double</code> representing the tree width
     */
    public double getdepth(DecisionNode node){
        if(node.tb == null && node.fb == null) return 0;
        return Math.max(getwidth(node.tb), getwidth(node.fb)) + 1;
    }//end getdepth() method
    
}//end DrawPanel class